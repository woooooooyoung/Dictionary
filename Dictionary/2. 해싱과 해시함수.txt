해싱 조사
키(key) 값을 해시 함수(Hash Function)라는 수식에 대입시켜 계산한 후 나온 결과를 주소로 사용하여 바로 값(Value)에
접근하게 할 수 있는 방법이다.

해시 함수(Hash Function)

키(key) 값을 값(Value)이 저장되는 주소 값으로 바꾸기 위한 수식이다

해신(Hashing) 사용 분야
보안(Security): 데이터의 위변조를 막기 위해 전자서명이나 보안 알고리즘에 사용
자료 구조(Data Stucture):기억 공간에 저장된정보를 보다 빠르게 검색하기 위해 절대주소나 상대주소가 아닌 해시 테이블(Hash Table)을 생성하는 방식

해싱(Hashing) 구현 기법
정적 해싱(Static Hashing)
고정 크기의 배열을 이용한 방법이다.
버킷(Bucket) 주소의 집합을 고정한다.
현재 파일의 크기를 고려하여 해시 함수(Hash Function)를 결정한다.
미래의 어떤 시점을 기점으로 파일 크기를 예상하여 해시 함수(Hash Function)를 결정한다.
파일의 크기가 커짐에 따라 주기적으로 해싱(Hashing) 구조를 재구성해야 한다.
구현이 쉽고 간단하다.
버킷(Bucket)의 크기를 작게 잡을 경우 출동(Collision)의 우려가 있고, 크게 잡을 경우 메모리 또는 디스크 낭비의 우력 ㅏ있다.
데이터의 증감에 따라 해싱(Hashing) 구조를 재구성해야 하기 때문에 추가적인 리소스가 필요하다
데이터의 증가에 따라 검색성능이 떨어진다
제산법(Divison)
 나머지 연산자를 이용하여 버킷주소(인덱스)를 계산하는 방법
 버킷주소(인덱스) = 키(key) 값 % (전체 버킷 크기) key % Table_Size
 버킷주소(0,1,2,3,4,5,6,7 = 8개(0~7)) = 8 (현재 Table_Size = 8)
 해시된 주소가 고르게 분포되지 않을 수 있기 때문에 일반적으로 전체 버킷의 크기를 소수(rime Number)로 하여 성능을 향상 시킨다.
 부하율(Load Factor, 전체 버킷에서 사용중인 버킷의 비율)은 70~80%가 적당하다
중간 제곱법(Mid-Square)
 키(key) 값을 제곱한 후 결과 값의 중간 부분에 있는 몇 비트만을 선택하여 버킷 주소(인덱스)로 사용
 제곱된 결과의 중간 비트는 일반적으로 모든 키(key) 값의 모든 문자에 영향을 받기 때문에 키(key)를 구성하는 일부 문자가
  같을지라도 서로 다른값을 가질 확률이 높다.
 버킷 주소(인덱스)를 얻기 위해 사용되는 비트의 수는 전체 버킷의 크기에 따라 달라지고 중간부분의 자릿수를 n이라 하면 각 키(key)값들이
  가지는 범위인 전체 버킷의 크기는 2의n승이 된다.(2진수를 사용하기 때문)
 키(key)	key의2승 의 중간비트 값(현재 중간비트수 = 2)
A 10		10 * 10 = 100
B 7			7  * 7  = 49	
C 77		77 * 77 = 5929
D 9			9  * 9  = 81
  0 - 10(A) -49(B) - 81(D) - 92(C) - 99

폴딩법 (Folding)
 키(key)를 마지막 부분을 제외한 모든 부분의 길이가 동일하게 여러 부분으로 나누고, 이들 부분을 모두 더하거나 XOR 연산을 하여 버킷 주소(인덱스)로 이용하는 방법
이동 폴딩(Shift Fording)
 각 부분의 값을 계산하기 위해 마지막을 제외한 모든 부분을 이동시켜 최하위 비트(LSB)가 마지막 부분의 자리와 일치하도록 우측 끝을 맞추어 더한 값을 버킷주서(인덱스) 로 사용하는 방법

  키(key)		 
A 12567595132 -> 125 + 675 + 951 + 32		= 1783
B 36345216282 -> 363 + 452 + 162 + 82		= 1059
C 1234724221  -> 123 + 472 + 422 + 1	    = 1018
D 33962547	  -> 339 + 625 + 47	 	 	    = 1011
  키(key)를 3비트 단위로 나눈 후 모두 더함
  0 - 11(D) - 18(C) - 59(B) - 783(A) - 999
경계 폴딩(Boundary Folding)
 원래의 키(key) 값을 여러 부분으로 나눈 후, 나누어진 각 부분의 경계선을 종이 접듯이 접어 역으로 정렬한 다음 같은 자리에 위치한 수를 더한 값을 버킷 주소(인덱스)로 사용하는 방법

  키(key)		 
A 12567595132 -> 125 + 576(675) + 951 + 23(32)	    = 1675(1783)
B 36345216282 -> 363 + 254(452) + 162 + 28(82)	    = 807 (1059)
C 1234724221  -> 123 + 274(472) + 422 + 1 (1)       = 820 (1018)
D 33962547	  -> 339 + 526(625) + 47	 	 	    = 912 (1011)
  키(key)를 3비트 단위로 나눈 후 정방향, 역방향으로 번갈아 읽은 뒤 모두 더함
  0 - 675(A) - 807(B) - 820(C) - 912(D) - 999

숫자 분석법(Digit-Analysis)
 키(key)를 구성하는 수들이 모든 키들 내에서 각 자리별로 어떤 분포인지를 조사하여 비교적 고른 분포를 나타내는 자릿 수를 필요한 만큼 선택하여 버킷 주소(인덱스)로 사용하는 방법
 파일의 키(key)값이 이미 알려진 정적 파일Static File)인 경우에 유용하며, 삽입과 삭제가 번번히 발생하는 경우에는 비효율 적이다.

   키(key)
A 013 - 1234 - 1126 -> 013 - 12(34) - 1(1)26
B 015 - 3341 - 2589 -> 015 - 33(41) - 2(5)89
C 015 - 1296 - 1359 -> 015 - 12(96) - 1(3)59
D 013 - 3365 - 6628 -> 013 - 33(65) - 6(6)28
  비슷한 숫자 배열이 나오는 비트들은 제외하고 숫자 중복이 적은 3비트를 선택
  0 - 341(A) - 415(B) - 656(D) - 963(C) - 999
숫자 분석을 할 때는 각 열마다 숫자가 중복되거나 비슷한 숫자가 많다면 무시하거나 제거하고 비겨적 고르게 분포한 열만 사용한다.
위를 분석하자면 왼쪽 3자리 열은 숫자가 중복되거나 동일한게 많아서 제거되고, 4,5열도 비슷한게 많아 제거되고, 6,7열은 비교적으로 중복되건숫자가 없고 고르게 분포되어있으니 사용하고, 8,9,10,11중 9열이 나머지 열중 중복되는 숫자가 없기때문에 사용한다.

기수 변환법(Radix-Exchange)
 어떤 진법으로 변환된 키(key)를 다른 짅법으로 간주하고 키(key)를 변환하여 버킷 주소(인덱스)를 얻는 방법
 배열의 크기가 10의 거듭제곱으로 표형되어 변환된 해단 버킷주소(인덱스)가 배열의 크기를 초과할 때는 버킷 주소(인덱스)의 최하위 자리부터 배열의 크기가 허용되는 거듭제곱(자릿수)만큼 취급하여 버킷 주소(인덱스)로사용
키(key)
41963 -> (4 * 16^4)+(1*16^3)+(9*16^2)+(6*16^1)+(3*16^0)=262114+4096+2304+96+3=268643
현재 Tavle_Size=1000
10진수로 입력된 키(41963)10을 16진수로 간주하고 이를 다시 10진수로 젼환하여 버킷 주소(인덱스)를 계산






해싱은 해시 함수에 문자열 입력값을 넣어서 특정한 값으로 추출하는 것을의미안다
키(key) : 해싱할 때 입력값을 키(key)라고 한다. 키(key)는 중복되지 않는 고유한 값이다
해시 함수를 통한 키(key) 값은 특정한 값으로 매핑(Mapping)되는데, 해시 함구에 따라서 2개 이상의
입력값이 하나의 값으로 매핑(Mapping)될 수 있다.

해시의 원리



해싱함수 조사



해싱함수의 효율



등등
제산법 : 버킷 주소(인덱스(index)) =  키(key) % 버킷 크기
중간 제곱법 : 키(key) 값을 제곱한 후 결과 값의 중간 부분에 있는 비트만 선택해서 버킷 주소로 사용

보안
MD5 : 충돌 회피성의 문제로 현재는 사용 중지
SHA : 현재 가장 많이 사용되는 해싱 암호화

https://dev-kani.tistory.com/2

https://developer-talk.tistory.com/321
https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=sdug12051205&logNo=221575587063